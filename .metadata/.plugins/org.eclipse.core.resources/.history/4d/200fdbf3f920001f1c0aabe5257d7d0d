package com.simplilearn.resources;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.simplilearn.model.Employee;
import com.simplilearn.service.EmployeeService;

@RestController
@RequestMapping("/api/employees")
public class EmployeeResource {

	private final EmployeeService employeeService;

	public EmployeeResource(EmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable String id, @RequestBody Employee employee) {
		if (employee.getName() == null) {
			return ResponseEntity.notFound().build();
		}
		
		Employee existingEmployee = employeeService.getEmployeeById(id).get();
		if ( existingEmployee  == null) {
			return ResponseEntity.notFound().build();
		}
		
		existingEmployee.setName(employee.getName());
		employeeService.updateEmployee(existingEmployee);
		return ResponseEntity.noContent().build();
	}
	
	@PostMapping
	public ResponseEntity<Void> addEmployee(@RequestBody Employee employee) {
		employeeService.addEmployee(employee);
		
		// Build URI
		URI location = ServletUriComponentsBuilder.fromCurrentRequest() // http:localhost:8080/api/employees
						.path("/{id}") // http:localhost:8080/api/employees/{id}
						.buildAndExpand(employee.getId()).toUri(); //http:localhost:8080/api/employees/4
		
		return ResponseEntity.created(location).build();
	
	}
	

	// URI : /api/employees/1
	@GetMapping("/{id}") // URI Template
	public ResponseEntity<Employee> getEmployeeById(@PathVariable String id) {
		Optional<Employee> employee = employeeService.getEmployeeById(id);
		return employee != null ? ResponseEntity.of(employee) : ResponseEntity.notFound().build();
		
//		Optional<Employee> employee = employeeService.getEmployeeById(id);
//		
//		if ( ! employee.isPresent() ) {
//			return ResponseEntity.notFound().build();
//		}
//		
//		return ResponseEntity.ok(employee.get());
	}

	@GetMapping
	public List<Employee> getAllEmployees() {
		return employeeService.getAllEmployees();
	}

}
